name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    # branches: [main]
    # Publish semver tags as releases.
    tags: ['v*.*.*']
  # pull_request:
  #   branches: [main]

env:
  # Use docker.io for Docker Hub if empty
  IMAGE_NAME: backplane/testrig

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        DISTRO:
          # https://www.debian.org/releases/
          - 'slim-buster'
          - 'slim-bullseye'
          - 'slim-bookworm'
          # https://alpinelinux.org/releases/
          - 'alpine3.15'
          - 'alpine3.16'
          - 'alpine3.17'
        PYTHON_VERSION:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'

    permissions:
      contents: read
      packages: write

    steps:
      # https://github.com/actions/checkout
      - name: Checkout repository
        uses: actions/checkout@v3

      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        # with:
        #   buildkitd-flags: --debug

      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Load Custom Data
        id: cdata
        shell: python
        run: |
          #!/usr/bin/env python3
          """ data conversion helper functions """

          def output(name: str, value: str) -> None:
              """write a named output value in github actions format"""
              print(f"::set-output name={name}::{value}")

          distro = "${{ matrix.DISTRO }}"
          if distro.startswith("slim-"):
            distro = distro.split("-")[1]  # slim-buster -> buster

          output("distro", distro)

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=schedule,pattern=nightly
          flavor: |
            latest=auto
            prefix=
            suffix=-${{ matrix.PYTHON_VERSION }}-${{ steps.cdata.outputs.distro }},onlatest=true

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: src
          build-args: |
            "PYTAG=${{ matrix.PYTHON_VERSION }}-${{ matrix.DISTRO }}"
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7
